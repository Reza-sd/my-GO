package piscine

//import "fmt"

func SortWordArr(a []string) {
	// arr := make([]string, len(a))
	// copy(arr, a)
	// var ch byte
	// var sortedArr []string

	// for na := 0; na <= 127; na++ {
	// 	for i := 0; i < len(arr); i++ {

	// 		if byte(arr[i][0]) == ch {
	// 			sortedArr = append(sortedArr, string([]byte(arr[i])[0])+arr[i][1:])
	// 		}
	// 	}
	// 	ch++
	// }
	// //a = sortedArr
	copy(a, SortSlice(a))
	// //return sortedArr
}

// --------------------------------------------------
func SortSlice(a []string) []string {

	var sortedArr []string
	var indexItem int
	middleArr := make([]string, len(a))
	copy(middleArr, a)

	for i := 0; i < len(a); i++ {
		indexItem = IndexOfMin(middleArr)

		//fmt.Println(middleArr,indexItem)

		sortedArr = append(sortedArr, middleArr[indexItem])

		//fmt.Println(middleArr,indexItem,indexArr)
		//fmt.Println(indexArr)
		//middleArr[indexItem]=" "
		middleArr = append(middleArr[:indexItem], middleArr[indexItem+1:]...)

	}

	//fmt.Println()
	return sortedArr
}

// ------------------------------------------
func IndexOfMin(a []string) int {

	var index int

	for i := 0; i < len(a); i++ {

		if AmIminInSlice(a[i], a) {

			index = i
			//fmt.Println("midleArr=", midleArr)
			//midleArr = append(midleArr[:i], midleArr[i+1:]...)
			//fmt.Println("midleArr-after=", midleArr)
		}
	}

	return index
}

// ---------------------------------------------------
func AmIminInSlice(s string, a []string) bool {
	count := 0
	for i := 0; i < len(a); i++ {
		if AmILess(s, a[i]) {
			count++
		}
	}

	if count == len(a) {
		return true
	} else {
		return false
	}

}

// ------------------------------------------------
func AmILess(s, v string) bool {

	if s <= v {
		return true
	} else {
		return false
	}

}

//-----------------------------------
